[style h1 <h1>[b]</h1>]  
[style h2 <h2>[b]</h2>]  
[style h3 <h3>[b]</h3>]  
[style test [b]]  
[style code <code>[b]</code>]  
[style hello Why hello, [b], how are you?]  
[style blue <span style="color: #0000ff;">[b]</span>]  
[style mopt {blue [b [lb][b][rb]]}]  

[style qrs 
[table border="1" bgcolor="#ffffdd",
[row ,[cell align="center",Quick Reference to Scripting Command]]
[row ,[cell bgcolor="#dddddd", [b]]]
[row ,
[cell bgcolor="#ddffdd",[i Items in] [b CAPS] [i are] [b 0/1] [i switches or switches with more options than] [b 0/1][i .]<br>
[i Multiple options are indicated by a range in brackets, such as] mopt 0-2[i .]
]]]]
  
{hello moe}
{hello
larry}
{hello curly}
  
[load myvar forvariable.txt]  
[lv myvar]
[gload othervar forvariable.txt]  
[gv othervar]
  
[raw test 123]  
[graw trust 456]  
[v trust]
[v test]
  
{h1 Test Results: aa_macro.py}

{h2 Text Formatting}
[mode 4.01s]  

[back 028]  
{h3 HTML 4.01s Mode:}
[p [b bold text]]
[p [i italic text]]
[p [u underlined text]]
[p [color 876 color3]]
[p [color fedcba color6]]
[mode 3.2]  
{h3 HTML 3.2 Mode:}
[p [u [i [b {hello Ben}]]]]
[p [color 876 color3]]
[p [color fedcba color6]]

{h2 linking}
[p [a http://fyngyrz.com]]
[p [a tab,http://fyngyrz.com]]
[p [a tab,http://fyngyrz.com,My Link]]
[p [a http://fyngyrz.com,My Other Link]]
[p [web http://fyngyrz.com]]
[p [web http://fyngyrz.com Another Link]]
[p [link http://fyngyrz.com]]
[p [link http://fyngyrz.com Another Link]]
[urlencode hi, Fred & linda]

{h2 Images}
{h3 No size, no local lookup so no relative path}
[p [img http://fyngyrz.com/images/beachflag.png http://fyngyrz.com]]
[p [img http://fyngyrz.com/images/beachflag.png]]
[p [img Beach Flag,http://fyngyrz.com/images/beachflag.png]]
[p [img Beach Flag,http://fyngyrz.com/images/beachflag.png http://fyngyrz.com]]

{h3 Size, identical (empty) relative path}
[p [locimg test.png http://fyngyrz.com]]
[p [locimg test.png]]
[p [locimg .png Test,test.png]]
[p [locimg .png Test,test.png http://fyngyrz.com]]
[p [locimg lpath=/usr/web/,wpath=/mypics/,test.png]]

[p [locimg test.jpg http://fyngyrz.com]]
[p [locimg test.jpg]]
[p [locimg .jpg Test,test.jpg]]
[p [locimg .jpg Test,test.jpg http://fyngyrz.com]]

[p [locimg test.gif http://fyngyrz.com]]
[p [locimg test.gif]]
[p [locimg .gif Test,test.gif]]
[p [locimg .gif Test,test.gif http://fyngyrz.com]]

{h3 Size, relative path only}
[lipath ./]  
[p [locimg test.png http://fyngyrz.com]]
[p [locimg test.png]]
[p [locimg .png Test,test.png]]
[p [locimg .png Test,test.png http://fyngyrz.com]]

[p [locimg test.jpg http://fyngyrz.com]]
[p [locimg test.jpg]]
[p [locimg .jpg Test,test.jpg]]
[p [locimg .jpg Test,test.jpg http://fyngyrz.com]]

[p [locimg test.gif http://fyngyrz.com]]
[p [locimg test.gif]]
[p [locimg .gif Test,test.gif]]
[p [locimg .gif Test,test.gif http://fyngyrz.com]]

{h3 Size, relative path and http path}
[lipath ./]  
[p [locimg randomdir/test.png http://fyngyrz.com]]
[p [locimg randomdir/test.png]]
[p [locimg .png Test,randomdir/test.png]]
[p [locimg .png Test,randomdir/test.png http://fyngyrz.com]]

[p [locimg randomdir/test.jpg http://fyngyrz.com]]
[p [locimg randomdir/test.jpg]]
[p [locimg .jpg Test,randomdir/test.jpg]]
[p [locimg .jpg Test,randomdir/test.jpg http://fyngyrz.com]]

[p [locimg randomdir/test.gif http://fyngyrz.com]]
[p [locimg randomdir/test.gif]]
[p [locimg .gif Test,randomdir/test.gif]]
[p [locimg .gif Test,randomdir/test.gif http://fyngyrz.com]]

[limg test.png]
[limg title=a pic,test.png]
[limg alt=testpng,test.png]
[limg target=http://ourtimelines.com,test.png]
[locimg lpath=/usr/web/,wpath=/mypics/,test.png]

{h2 Multiple Style Invocation}
[style a a[b]a]  
[style b b[b]b]  
[locs a X]
[locs b X]
[locs a,b X,Y]  

[gstyle c c[b]c]  
[gstyle d d[b]d]  
[glos c X]
[glos d X]
[glos c,d X,Y]  

[s a X]
[s b X]
[s c X]
[s d X]
[s a,b,c,d W,X,Y,X]
{a,b,c,d J,K,L,M}

[s sep=|,a,b,c,d N|O|P|Q]
[locs sep=|,a,b A|S]
[glos sep=|,c,d B|T]
{sep=|,a,b,c,d A|S|I|A}

{h2 HTML Lists}
[style lwrap <u>[b]</u>]  
[p [ul item1,item2]]
[p [ul sep=|,item1|item2|item3]]
[p [ul wrap=lwrap,item1,item2]]
[p [ul wrap=lwrap,sep=|,itemW|itemX]]
[p [ul sep=|,wrap=lwrap,itemY|itemZ]]
[p [ol item1,item2]]
[p [iful item1]]
[p [iful item1,item2]]
[p [ifol item1]]
[p [ifol item1,item2]]
[p [t a,b,c]]
[p [t wrap=code,a,b,c]]
[p [t wrap=code,sep=|,d|e|f]]

[ul istyle=color:#ff0000,a,b,c]
[ul lstyle=font-weight: bold;,a,b,c]
[ul lstyle=margin-bottom: .5em;,istyle=color:#00ff00,a,b,c]

[iful istyle=color:#ff0000,item1]
[iful istyle=color:#ff0000,item1,item2]
[ifol istyle=color:#ff0000,item1]
[ifol istyle=color:#ff0000,item1,item2]

[iful lstyle=font-weight: bold;,item1]
[iful lstyle=font-weight: bold;,item1,item2]
[ifol lstyle=font-weight: bold;,item1]
[ifol lstyle=font-weight: bold;,item1,item2]

[iful lstyle=margin-bottom: .5em;,istyle=color:#00ff00,item1]
[iful lstyle=margin-bottom: .5em;,istyle=color:#00ff00,item1,item2]
[ifol lstyle=margin-bottom: .5em;,istyle=color:#00ff00,item1]
[ifol lstyle=margin-bottom: .5em;,istyle=color:#00ff00,item1,item2]

{h2 Tables}
[table 
[row [header col 1][header col 2]]
[row [cell test1][cell test2]]
]
[table border=0,
[row [header bgcolor="#ffffff",col 1][header col 2]]
[row bgcolor="#888888",[cell test1][cell align="center", test2]]
]

{h2 Variables}
[p 
[local foo bar][v foo]
[global bing bong][v bing]
[global foo bip][v foo][gv foo][lv foo]
[page][v foo][gv foo][lv foo] Hooray!
[local x 1]  
[vinc x]
[vdec x]
[vinc pre=1,x]
[vdec pre=1,x]
[v x]
]

{h2 stack}
[p 
[push X]stack="[pop ]"
[push X][push Y][push Z]stack="[pop ]","[pop ]",[pop ]"
[push 3,bugger]stack="[pop ]","[pop ]","[pop ]"
[push X][push Y][push Z][flush]stack="[pop ]","[pop ]","[pop ]"
[push X][push Y][push Z]stack 1="[fetch 1]"[flush]
[push sep=|,5|five]"[pop ]","[pop ]","[pop ]","[pop ]","[pop ]"
]

{h2 Math}
[p 
[int 34.5]
[int 02]
[abs -3]
[abs 3.2]
[abs -6.7]
[add -1 6]
[sub 10 9]
[mul 3 5]
[div 72 9]
[inc 1]
[dec 10]
max 5 10 = [max 5 10]
max 9 4 = [max 9 4]
min 5 10 = [min 5 10]
min 4 9 = [min 4 9]
stage 100 50 10 5 = [stage 100 50 10 5]
stage 50 75 10 5 = [stage 50 75 10 5]
stage mode=float,digits=1,0 1 10 5 = [stage mode=float,digits=1,0 1 10 5]
stage mode=float,digits=3,0 1 10 10 = [stage mode=float,digits=3,0 1 10 10]
stage mode=float,0 1.5 3 2 = [stage mode=float,0 1.5 3 2]
stage mode=float,2.5 3.5 2 1 = [stage mode=float,2.5 3.5 2 1]
stage mode=float,digits=6,0 10 3 1 = [stage mode=float,digits=6,0 10 3 1]
stage mode=float,.5 .75 5 2 = [stage mode=float,.5 .75 5 2]
stage mode=float,0 1 10 5.5 = [stage mode=float,0 1 10 5.5]
]

{h2 Conditionals}
[style mmmm --[b]--]  
[p 
[even 2 EVEN][even 1 !ODD!]
[odd 1 ODD][odd 2 !EVEN!]
[if bleep bleep Match][if foo bar !NO MATCH!]
[if sep=|,bleep|bleep|sepMatch][if sep=|,foo|bar|!NO sepMATCH!]
[if sep=[co],bleep,bleep,comMatch][if sep=[co],foo,bar,!NO comMATCH!]
[else sep=|,foo|bar|No sepMatch][else sep=|,bleep|bleep|!sepMATCH!]
[else sep=[co],foo,bar,No comMatch][else sep=[co],bleep,bleep,!comMATCH!]
[else foo bar No Match][else bleep bleep !MATCH!]
1: [if style=mmmm,bleep bleep Match][if style=mmmm,foo bar NO MATCH]
2: [else style=mmmm,foo bar No Match][else style=mmmm,bleep bleep MATCH]
1 [ne something,Something][ne ,!EMPTY!]
2 [ne sep=|,something|Something][ne sep=|,|!EMPTY!]
3 [ne ,Something][ne something,!EMPTY!]
4 [ne sep=|,|Something][ne sep=|,something|!EMPTY!]
5 [eq something,Something][eq ,!EMPTY!]
6 [eq sep=|,something|Something][eq sep=|,|!EMPTY!]
7 [eq ,Something][eq something,!EMPTY!]
8 [eq sep=|,|Something][eq sep=|,something|!EMPTY!]
[local fooge blah]  
[local pooge]  
[ne [v fooge],Something][ne [v pooge],!EMPTY!]
[eq [v fooge],Something][eq [v pooge],!EMPTY!]
]

{h2 Parsing and text processing}
[style sdex [b] Soundex: [soundex [b]]]
[p
[slice 3:9,catmonkeydog]test2
[split |,foo|bar|bleep|blop]test3
[parm 0] [parm 1] [parm 2] [parm 3]test 4
[upper i was lower, but now am high]
[lower I WAS HIGHER, BUT NOW AM BROUGHT LOW]
I have a [upper [roman 427]] Hemi ox-cart
[chr 66][chr 69][chr 78]
[csep 1234567890]
[fcsep 12345678.90]
17 dec to hex: [dtohex 17]
 9 dec to oct: [dtooct 9]
 3 dec to bin: [dtobin 3]
11 hex to dec: [htodec 11]
11 oct to dec: [otodec 11]
11 bin to dec: [btodec 11]
97 hex to binary: [dtobin [htodec 97]]
11010110 to hex: [upper [dtohex [btodec 11010110]]]

7 dec to hex 2-digits: [dtohex digits=2,7]
7 dec to oct 3-digits: [dtooct digits=3,7]
9 dec to bin 8-digits: [dtobin digits=8,9]
11 hex to dec 3-digits: [htodec digits=3,11]
11 oct to dec 3-digits: [otodec digits=3,11]
11 bin to dec 3-digits: [btodec digits=3,11]

[style setme tothis]  
should be "tothis": "{setme}"
[style setme]  
should be no content: "{setme}"
[gstyle gsetme tothat]  
should be "tothat": "{gsetme}"
[gstyle gsetme]  
should be no content: "{gsetme}"
stripe charset=xy,xytestingyx = [stripe charset=xy,xytestingyx]
  
[hmap hlist]  
[translate hlist,ABC]
[translate pre=0x,inter=[co] ,post=.,hlist,ABC]
  
[local cont this is a test
of the emergency broadcast system]
content:
[v cont]
lines: [lc [v cont]]
words: [wc [v cont]]
chars: [len [v cont]]
[lc]
[wc]
[len]
[b style [color f84 me]]
[i]
[u]
[local cont thaAAAaaas right all]
content: [v cont]
a: [count a,[v cont]]
aa: [count aa,[v cont]]
overlaps=yes,aa: [count overlaps=yes,aa,[v cont]]
sep=|,overlaps=yes,aa: [count sep=|,overlaps=yes,aa|[v cont]]
casesens=yes,aa: [count casesens=yes,aa,[v cont]]
casesens=yes,AA: [count casesens=yes,AA,[v cont]]
overlaps=yes,casesens=yes,AA: [count overlaps=yes,casesens=yes,AA,[v cont]]
sep=|,overlaps=yes,casesens=yes,AA: [count sep=|,overlaps=yes,casesens=yes,AA|[v cont]]
{sdex Knuth}
{sdex Asimov}
{sdex Clarke}
{sdex Einstein}
[local cont [color 567 testing [b 1 [i 2] 3]]]
content: [v cont]
stripped of tags: [strip [v cont]]
Hamcalls:
[hsort W3OZ Larry
N2MGA
AA7AS,Ben
w2jvm Harold
W2GGI Robert
N5CST!Johann!
KE4TP-Pete]
]

{h2 aa_macro and Python Parsing}
[postparse 
from aa_macro import *

mod = macro()

inputtext = '[lb]i print \'some\' "content" from here[rb][lb]local foo bar[rb]'
outputext = mod.do(inputtext)
print outputtext

inputtext = "[lb]b \"more\" 'content'[rb] [lb]v foo[rb]"  # as we're using the same object, anything...
outputext = mod.do(inputtext)           # ...set up in it is still in context here
print outputtext
]
  
[pythparse 
from aa_macro import *

mod = macro()

inputtext = '[i print \'some\' "content" from here][local foo bar]'
outputext = mod.do(inputtext)
print outputtext

inputtext = "[b \"more\" 'content'] [v foo]"  # as we're using the same object, anything...
outputext = mod.do(inputtext)           # ...set up in it is still in context here
print outputtext
]  

[v loc_pyth]

[local txl_lf <br>[lf]]  
[gstyle key <span class="ckey">[b]</span>]  
[gstyle keyhints 
<div style="
       width: 75%;
border-style: solid;
  background: #ffffff;
  text-align: center;
     padding: .5em;
      margin: auto;
">
[i Keyboard Navigation]
<hr width="75%">
{key ,} Previous Page
{key .} Next Page
{key t} TOC
{key i} Index
</div>]  
  
[slit keyhints]
[v loc_slit]

{h2 switch/case}
switch (csep=X,)(isep=Y,)(default=styleName,)switchName caseXstyleName(YcaseXstylename)
[style foo foo([b])bar]  
[style bar bar([b])foo]  
[switch test1 1|foo,2|bar]  
[case test1 1,bah]
[case sep=|,test1 2|humbug]
[style rude dude:[b]!]  
[style remark remark:"[b]"]  
[style huh ??[b]??]  
[switch csep=^,isep=$,test2 A$rude^B$remark]  
[case test2 A,shhhh]
[case test2 B,speaking extemporaneously]
[switch default=huh,test3 x|foo,y|bar]  
[case test3 x,with-foo]
[case test3 y,with-bar]
[case test3 z,with-nothing]

{h2 for/in}
[style mmm [b] ]  
[for mmm,0,10,2]
[list listx,a,c,d,c]
[in mmm,listx]

{h2 Data Lists}
[list slicetest,a,2,c,4,e,6,g,8]  
slicetest list: [dlist slicetest]
1 = [lslice 1,slicetest,sliceresult]  
[dlist sliceresult]
2:3 = [lslice 2:3,slicetest,sliceresult]  
[dlist sliceresult]
:4 = [lslice :4,slicetest,sliceresult]  
[dlist sliceresult]
4: = [lslice 4:,slicetest,sliceresult]  
[dlist sliceresult]
::-1 = [lslice ::-1,slicetest,sliceresult]  
[dlist sliceresult]
[list stacker,e,f,g,h,i]  
[dlist stacker]
[lpush stacker,k]  
[dlist stacker]
[lpop stacker]
[lpop stacker]
[lpop stacker,-2]
[dlist stacker]
[list lowers,a,b,c]  
list length of a,b,c: [llen lowers]
[e lowers,2] [e lowers,1] [e lowers,0]
[list sep=|,uppers,A|B|C]  
[append uppers,amphetamine]  
[lset uppers,1,aircraft]  
[e uppers,2] [e uppers,1] [e uppers,0] [e uppers,3]
[dlist uppers]
[style quotes "[b]" ]  
[dlist style=quotes,uppers]
[cmap xlate]  
[e xlate,66]
[translate xlate,ALPHA]
[lset xlate,65,-a-]  
[translate xlate,ALPHA]
[list unsorted,larry,ben,Beth,alan,leroy]  
[dlist style=quotes,unsorted]
[asort unsorted]  
[dlist style=quotes,unsorted]
[aisort unsorted]  
[dlist style=quotes,unsorted]
[list sep=|,nunsorted,44,larry|1,ben|2,Beth|3,alan,smith|5,leroy]  
[dlist style=quotes,nunsorted]
[isort nunsorted]  
[dlist style=quotes,nunsorted]
[style nonquotes [splitcount 1][split [co],[b]]"[parm 1]" ]  
[dlist style=nonquotes,nunsorted]
[ltol nlist,line 1
line 2
line3]
[dlist nlist]
[list hamlist,W3OZ Larry,N2MGA,AA7AS Ben,w2jvm Harold,W2GGI Robert,N5CST!Johann!,KE4TP-Pete]  
[style hwrap [b][nl]]  
[local cbar 123456789 ]  
[local cont this is line one	
this is line two 
	this is line three
this is line    four and I'm really not kidding about this at all, no fooling, folks
and		 this is the last line]  

Word wrap at 72 columns
[dup 8,[v cbar]]
[wwrap 72,[v cont]]  

Word wrap at 31 columns
[dup 4,[v cbar]]
[wwrap 31,[v cont]]  

Word wrap at 72 columns, with style
[style mywrap ([b])[nl]]  
[dup 8,[v cbar]]
[wwrap wrap=mywrap,72,[v cont]]  

Word wrap at 31 columns, with style
[style mywrap ([b])[nl]]  
[dup 4,[v cbar]]
[wwrap wrap=mywrap,31,[v cont]]  

Word wrap with HTML
123456789 123456789 123456789 
[wwrap 30,This is a <b>test</b> of the emergency <font color="#ff0000">broadcast system</font>. This is <i>only</i> a test. If this had been a real emergency, you
would have been instructed to weep in abject fear.]

Word wrap with HTML, but not counting it
123456789 123456789 123456789 
[wwrap nohtml=1,30,This is a <b>test</b> of the emergency <font color="#ff0000">broadcast system</font>. This is <i>only</i> a test. If this had been a real emergency, you
would have been instructed to weep in abject fear.]

Unsorted list:
--------------
[dlist style=hwrap,hamlist]  

Sorted List:
------------
[lhsort hamlist]  
[dlist style=hwrap,hamlist]  

first, middle and last styles
-----------------------------
[style first -[b] ]  
[style middle :[b]: ]  
[style last [b]-]  
[list list1,a,b,c,d]  
[dlist fs=first,style=middle,ls=last,list1]
  
With nice interspersion:
------------------------
[list sep=|,myList,aa7as (Ben)|N5CST (Johann)|W3Oz (Larry)]  
[lhsort myList]  
[style hwrap [ne [v call],, ][b][local call [b]]]  
[local call]  
[dlist style=hwrap,myList]

{h2 Data Dictionaries}
[dict mydict,foo:bar,gee:whiz]'
gee="[d mydict,gee]"
foo="[d mydict,foo]"
bip="[d mydict,bip]"
resetting foo...\n[setd mydict,foo:guggle]'
foo="[d mydict,foo]"

{h2 Text Processing}
[dup 3,foo]
[eval 5,bar]
[local x 0]  
[style bing [vinc x]:[b] ]  
[stripe [eval style=bing,5,blarg]]
[rstrip testing 3   ]
[find ani,pusilanimous]
[find sep=|,we|and,then we said "no"]
[replace foo,bar,you foo this]
[replace sep=|,jim|larry|mark, jim, or leroy]
[rjust 6,-,four]
[rjust 6, ,three]
[rjust 6,&nbsp;,foo]
'[center 7,-,bar]' odd in odd, left side pad only
'[center -7,-,xyz]' odd in odd, pad both sides
'[center -7,-,wxyz]' even in odd, pad both sides
'[center -8,-,xyz]' odd in even, pad both sides
[capt joe and the dog]
[capt the exception]
[capt tropic OF consumption]
[capt joe and a dog]
[capw joe and a dog]
[caps joe and a dog]
[list cvt,HTML,Python,PHP]
[scase cvt,I prefer html, and python, to Html and php.]
[inter -,L,4,1234567890]
[inter -,R,4,1234567890]
[ssort fred
zander
larry
Marge
ben]
[sisort fred
zander
larry
Marge
ben]
[issort 5,fred
4,zander
2,larry
3,Marge
1,ben]
  
{h2 Escapes}
[co]
[vb]
[lt][sp][gt][nl]  
[lb][sp][rb][lf]  
[ls][sp][rs][nl]  
  
{h2 Miscellanea}
[p 
[local v1 3]  
[global v1 5]  
[split [co],7,2,4]
[repeat 2 two ]test1[comment Invisible Me]
[repeat [v v1] three ]
[repeat [lv v1] three again: ]
[repeat [gv v1] five ]
[repeat [parm 1] two ]
]
[gstyle h3 Third-level title <i>[b]</i>]
[p 
[ghost h3]
[ghost source=global,h3]
[ghost source=local,h3]
{h3 humma humma}
]
[dict mydict,messed:foo,up:bar,gee:darn,whiz:it,really:truly]  
[local content Gee whiz, this  is //really// messed up!]  
[v content]: [expand mydict,[v content]]
[dict tonedown,befunked:bewildered,clueless:confused,afraid:nervous]  
[local content Befunked, afraid -- and *clueless*.]  
[v content] = [expand tonedown,[v content]]
[dict dbldown,silly:a flaming-idiot]  
[expand dbldown,This person is silly!]
[p 
[include aagen-example.txt]  
[embrace embrace-example.py]  
happy extension: [happy this is a good thing]
unhappy extension: [unhappy this is a bad thing]
back-reference to parent by embraced module: [dtcase]
Replacement of [lb]i[rb]: [i emphasize me]
[list li1,a,b,c]  
[list li2,d,e,f]  
[lcc li1,li2,li3]  
[dlist li3]
[lcopy li3,li4]  
[dlist li4]
[list makeEnts,&|&amp;,"|&quot;]  
[lsub makeEnts,"She & me & some Tequila"]
]
if 5 <= 4 lte = [ifle 5,4,lte]
if 5 <= 5 lte = [ifle 5,5,lte]
if 5 <= 6 lte = [ifle 5,6,lte]
if 5 >= 4 gte = [ifge 5,4,gte]
if 5 >= 5 gte = [ifge 5,5,gte]
if 5 >= 6 gte = [ifge 5,6,gte]
[sys echo shell test]
-----
[fref thing] and again: [fref thing]
-----
[resolve thing,foobar, brother]  
-----
[fref co] and again: [fref co]
-----
[resolve hex=1,co,2c]
-----
[th 1] [th 2] [th 3] [th 4]
[nd 1] [nd 2] [nd 3] [nd 4]
[style showab [split [co],[b]][parm 0][parm 1]]
{showab C,D,E}
[dict hcdict,Marty:KA7GKN,Ben:AA7AS,Larry:W3OZ,George:W4KVU]  
[dcopy hcdict,yourdict]  
[dkeys yourdict,keylist]  
[dlist keylist]
[style keyvalue [splitcount 2][split |,[b]][parm 1]: [d [parm 0],[parm 1]][parm 2]]  
[asort keylist]  
[dlist style=keyvalue,parms=hcdict|,posts=|[nl],keylist]  
[style foo barbeque]  
[ifge style=foo,4,5, hello[nl]]  
[ifge style=foo,5,4, dolly[nl]]  

[getc plugin_demo.c]
[getc high=c,plugin_demo.c]

[ol sep=|,start=7,seven|eight|nine]
[ol sep=|,type=A,seven|eight|nine]
[ol sep=|,type=A,start=3,seven|eight|nine]

{mopt a-b}

[alphalead abcd1234 test]
[alphanumlead abcd1234 test]

[alphalead trail=1,abcd1234 test]
[alphanumlead trail=1,abcd1234 test]

[url http://fyngyrz.com/|Home]
[url nam=glop,]
[url nam=foo]
[url tgt=_blank,http://fyngyrz.com/|Home Page]
[url css=text-decoration: underline;,http://fyngyrz.com/|Home Page]
[url sep=[co],http://fyngyrz.com/,Home Page]

[raw c void main()
{
	printf("Hello, Whirled\n");
}]
[getc var=c]

[local test1 this is a test]
[save test1 aam_test1.txt]
[global test2 this is also a test]
[gsave test2 aam_test2.txt]

[local x [encrypt breakat=8,seed=19,icount=5,salt=fibble de gook,this is a test]]  
[v x]
[decrypt seed=19,icount=5,salt=fibble de gook,[v x]]

[encrypt this is also a test]
[decrypt [encrypt this is also a test]]

[style ripple *[b]* ]  
[splash style=ripple,1,2,3,4]
[splash style=ripple,sep=|,a|b|c|d]
[splash style=ripple,sep=/,limit=2,i/ii/iii/iv]

[splash inter=-,1,2,3,4]
[splash inter=[co] ,ntl= and ,1,2,3,4]
[splash pre=x,post=y,inter= ,1,2,3,4]
[splash ntl= and ,pre=x,post=y,inter= ,1,2,3,4]

[style rapple ([b])]  
[style wrinkle [v loc_splashnum]:[b][nl]]
[splash style=rapple,inter=-,1,2,3,4]
[splash style=rapple,inter=[co] ,ntl= and ,1,2,3,4]
[splash style=rapple,pre=x,post=y,inter= ,1,2,3,4]
[splash style=rapple,ntl= and ,pre=x,post=y,inter= ,1,2,3,4]
[splash style=wrinkle,grape,cherry,persimmon]

[br]
[br parms=clear="all"]
[br can't touch this]
[br parms=clear="all",or this either]
[random seed=punt]
[random seed=punt,icount=3]
[mul mode=float,2 2]
[div mode=float,10.0 3]
[add mode=float,2 2.5]
[sub mode=float,5 2.2]
[month 3]
[month mode=long,3]
[style x [b] [ampm [b]] ]
[for x,0,24,1]
[style x [twelve [b]] ]
[for x,0,24,1]
Double locked-box encryption:
[local x [encrypt seed=1234,This is a test]]  
[local x [encrypt seed=5678,again=1,[v x]]]  
[local x [encrypt seed=1234,again=1,[v x]]]  
last stage of mode 0:
[v x]
[decrypt seed=5678,[v x]]
Double locked-box encryption, mode 1:
[local x [encrypt seed=chump,mode=1,Test-tickle]]  
[local x [encrypt seed=can,mode=1,again=1,[v x]]]  
[local x [encrypt seed=chump,mode=1,again=1,[v x]]]  
Last stage of mode 1:
[v x]
[dict mtest,foo:1]  
[d mtest,foo]
[d mtest,bar]
[d mtest,bar,0]
[d sep=|,mtest|foo]
[d sep=|,mtest|bar]
[d sep=|,mtest|bar|0]
[decrypt seed=can,mode=1,[v x]]
[crop words=true,col=41,this is a test of the emergency broadcast system. If this had been a real emergency, we would all be dead by now.]
[collapse this is  a      test]
[wwrap eol=|,40,This is a test of the emergency broadcast system. If this had
been a real emergency, you would have been instructed to place your
head between your legs and kiss your ass goodbye.
|Or at least, you would have been instructed to go quiver underneath your
bed while we sorted out how to break the news to you that your existence
into the near future is in serious doubt.]  
[round 22.4]
[round digits=1,22.44]
[style help2=bugger,help=hooah,foo bar]  
[helps foo]
[helps2 foo]
[gstyle help2=pumpkin,help=yessir,bar foo]  
[helpg bar]
[helpg2 bar]
[term HTH]
[term astyle=border-bottom:green dashed;,HTH]
[ddelta 20180606 20180607]
[locsplit pxv,|,abc|def|ghi]  
[v pxv0] [v pxv1] [v pxv2] [v pxv_splitcount]
[glosplit nnq,|,jkl|mno|pqr]  
[v nnq0] [v nnq1] [v nnq2] [v nnq_splitcount]
